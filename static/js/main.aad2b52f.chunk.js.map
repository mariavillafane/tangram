{"version":3,"sources":["maths/utils.js","maths/geometry.js","App.js","reportWebVitals.js","index.js"],"names":["range","count","Array","keys","batch","arr","length","map","x","slice","rasteriseTriangle","vec","y","addVec","a","b","multiplyVec","scalar","subVec","getStepSize","c","Math","max","getSteps","triangle","m","n","o","alpha","beta","steps_m","steps_n","u","steps","round","v","f","getAverageValue","values","reduce","getAverageColorRGBA","pixels","main","verticesOfTriangles","canvas","document","querySelector","img","width","height","ctx","getContext","drawImage","console","log","imageData","getImageData","imageMatrix","data","row","w_triangles","offset","triangles","tr","avgColor","pos","drawAverageTriangles","imageDataAgain","Uint8ClampedArray","flat","flatMap","to_image_data","newImage","ImageData","putImageData","App","useState","setVarVerticesOfTr","useEffect","setTimeout","className","src","onClick","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","fill","r","cx","cy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oPACO,SAASA,EAAMC,GACpB,OAAO,YAAIC,MAAMD,GAAOE,QAKnB,SAASC,EAAMH,EAAOI,GAC3B,OAAOL,EAAMK,EAAIC,OAAOL,GAAOM,KAAI,SAAAC,GAAC,OAAGH,EAAII,MAAMD,EAAEP,GAAQO,EAAE,GAAGP,M,eC4CjDS,GAlDV,SAASC,EAAIH,EAAEI,GACpB,MAAO,CACLJ,EAAEA,EACFI,EAAEA,GAIC,SAASC,EAAOC,EAAGC,GAExB,OAAOJ,EAAIG,EAAEN,EAAIO,EAAEP,EAAGM,EAAEF,EAAIG,EAAEH,GAGxB,SAASI,EAAYF,EAAGG,GAE9B,OAAON,EAAIG,EAAEN,EAAIS,EAAQH,EAAEF,EAAIK,GAG1B,SAASC,EAAOJ,EAAEC,GAEvB,OAAOJ,EAAIG,EAAEN,EAAIO,EAAEP,EAAGM,EAAEF,EAAIG,EAAEH,GAQzB,SAASO,EAAYC,GAE1B,OAAO,EAAMC,KAAKC,IAAIF,EAAEZ,EAAEY,EAAER,GAGvB,SAASW,EAASH,GACvB,OAAOC,KAAKC,IAAIF,EAAEZ,EAAEY,EAAER,GAiBjB,SAAUF,EAAkBc,GAA5B,iGACCC,EAAIP,EAAOM,EAAST,EAAES,EAASV,GAC/BY,EAAIR,EAAOM,EAASJ,EAAEI,EAASV,GAC/Ba,EAAIH,EAASV,EAEbc,EAAQT,EAAYM,GACpBI,EAAOV,EAAYO,GAEnBI,EAAUP,EAASE,GACnBM,EAAUR,EAASG,GATpB,cAYW1B,EAAM8B,IAZjB,0DAYME,EAZN,QAaGC,EAAQZ,KAAKa,MAAMH,IAAUD,EAAUE,GAAIF,IAb9C,cAca9B,EAAMiC,IAdnB,2DAgBD,OAFSE,EAdR,kBALkBf,EAqBJP,EAAOc,EAAGd,EAAOG,EAAYS,EAAEO,EAAEJ,GAAQZ,EAAYU,EAAES,EAAEN,KApBrElB,EAAIU,KAAKa,MAAMd,EAAEZ,GAAIa,KAAKa,MAAMd,EAAER,IAIpC,wHAAAwB,IAAA,oIAAAA,IAAA,+CALA,IAAkBhB,IAKlB,qCAsBP,SAASiB,EAAgBC,GAYvB,OAJEA,EAAOC,QACL,SAAC/B,EAAEI,GAAH,OAASJ,EAAEI,IACX,GAES0B,EAAOhC,OAItB,SAASkC,EAAoBC,GAK3B,MAAO,CAJGJ,EAAgBI,EAAOlC,KAAI,SAAAC,GAAC,OAAIA,EAAE,OAClC6B,EAAgBI,EAAOlC,KAAI,SAAAC,GAAC,OAAIA,EAAE,OAClC6B,EAAgBI,EAAOlC,KAAI,SAAAC,GAAC,OAAIA,EAAE,OAClC6B,EAAgBI,EAAOlC,KAAI,SAAAC,GAAC,OAAIA,EAAE,QAC3BD,KAAI,SAAAC,GAAC,OAAIa,KAAKa,MAAM1B,MCtFvC,SAASkC,EAAKC,GACZ,IAAMC,EAASC,SAASC,cAAc,qBAChCC,EAAMF,SAASC,cAAc,eAEnCF,EAAOI,MAAQD,EAAIC,MACnBJ,EAAOK,OAASF,EAAIE,OAEpB,IAAMC,EAAMN,EAAOO,WAAW,MAC9BD,EAAIE,UAAUL,EAAK,EAAG,EAAGA,EAAIC,MAAOD,EAAIE,QAExCI,QAAQC,IAAI,OAAQX,GACpB,IFTiC5B,EAUJW,EAAGrB,EED1BkD,EAAYL,EAAIM,aAAa,EAAG,EAAG,IAAK,KAExCC,EFVYrD,EEUkB,KFXHW,EEWQ,GAAGwC,EFVJG,MACvBnD,KAAI,SAAAoD,GAAG,OAAIvD,EAAMW,EAAG4C,MEY/BC,GFJuBlC,EEIK,GFJFrB,EEIKsC,GFH7BrC,QAAUoB,EAIT1B,EAHSK,EAAIC,OAAOoB,EAAE,GAGPnB,KAAI,SAAAsD,GAAM,OAAIxD,EAAII,MAAMoD,EAAS,EAAGA,EAASnC,MAG5D,IEHT2B,QAAQC,IAAI,cAAeM,GDyEtB,SAA8BE,EAAWL,GAAa,IAAD,gBACnCK,GADmC,IAC1D,2BAAiC,CAAC,IAAD,EAAtBtC,EAAsB,QACzBuC,EAAE,YAAOrD,EAAkBc,IAG3BwC,EAAWxB,EADFuB,EAAGxD,KAAI,SAAA0D,GAAG,OAAIR,EAAYQ,EAAIrD,GAAGqD,EAAIzD,OAHrB,cAKbuD,GALa,IAK/B,2BAAsB,CAAC,IAAZE,EAAW,QAGpBR,EAAYQ,EAAIrD,GAAGqD,EAAIzD,GAAKwD,GARC,gCADyB,+BClE1DE,CALkBN,EAAYrD,KAAI,SAAAwD,GAAE,ODU/B,SAAkBjD,EAAEC,EAAEK,GAC3B,MAAM,CACJN,EAAEA,EACFC,EAAEA,EACFK,EAAEA,GCdoCI,CAASuC,EAAG,GAAIA,EAAG,GAAIA,EAAG,OAKlCN,GAEhC,IAAMU,EFnBD,SAAuBV,GAE5B,OAAO,IAAIW,kBAAkBX,EAAYY,OAAOC,SAAQ,SAAA9D,GAAC,mBAAQA,OEiB1C+D,CAAcd,GAG/Be,EAAW,IAAIC,UAAUN,EAAgB,IAAK,KAEpDjB,EAAIwB,aAAaF,EAAU,EAAG,GAyCjBG,MAlCf,WAAgB,IAAD,EACqCC,mBAAS,IAD9C,mBACNjC,EADM,KACekC,EADf,KAsBb,OApBAxB,QAAQC,IAAI,yBAA0BX,GAEtCmC,qBAAU,WAERC,YADc,kBAAMrC,EAAKC,SAkBzB,sBAAKqC,UAAU,MAAf,UACE,kDACA,qBAAKA,UAAU,aAAaC,IAAI,uBAChC,wBAAQD,UAAU,mBAAmBhC,MAAO,IAAKC,OAAQ,IAAKiC,QAflE,SAAwBC,GACtB,IAAMC,EAAOD,EAAME,OAAOC,wBACpB9E,EAAIa,KAAKa,MAAMiD,EAAMI,QAAUH,EAAKI,MACpC5E,EAAIS,KAAKa,MAAMiD,EAAMM,QAAUL,EAAKM,KAC1CrC,QAAQC,IAAI,CAAC9C,IAAEI,MAEfiE,EAAmB,GAAD,mBAAKlC,GAAL,CAA0BhC,EAAIH,EAAEI,SAUhD,qBAAKoC,MAAO,IAAKC,OAAQ,IAAzB,SACE,wBAAQ0C,KAAK,MAAMC,EAAG,GAAIC,GAAI,IAAKC,GAAI,YC/DhCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7D,SAAS8D,eAAe,SAM1BZ,M","file":"static/js/main.aad2b52f.chunk.js","sourcesContent":["\r\nexport function range(count){\r\n  return [...Array(count).keys()];\r\n}\r\n  \r\n// batch(2, [1,2,3,4,5,6]) -> [[1,2],[3,4],[5,6]]\r\n//batch converts flat array of image into //count = length of group\r\nexport function batch(count, arr) {\r\n  return range(arr.length/count).map(x=> arr.slice(x*count, (x+1)*count))\r\n}\r\n  \r\nexport function to_image_matrix(a, b, image_data){\r\n  const imageRows = batch(a*b, image_data.data) //512*4\r\n  return imageRows.map(row => batch(b, row)) //4, row \r\n}\r\n  \r\nexport function to_image_data(imageMatrix){\r\n  //flatten array js\r\n  return new Uint8ClampedArray(imageMatrix.flat().flatMap(x => [...x]));\r\n}\r\n  \r\nexport function slidingWindow (n, arr){ //n=3\r\n  if (arr.length >= n) {\r\n    const windows = arr.length-n+1\r\n    //triple = [i, i+1, i+2]\r\n    //range(windows).map(offset => arr[offset + 0] , offset + 1, offset + n-1] ) \r\n    return range(windows).map(offset => arr.slice(offset + 0, offset + n) ) \r\n\r\n  } else {\r\n    return []\r\n  }\r\n} \r\n\r\n","import { range } from './utils';\r\n\r\nexport function vec(x,y) {\r\n  return {\r\n    x:x, \r\n    y:y\r\n  };\r\n}\r\n  \r\nexport function addVec(a, b) {\r\n  //add a + b ; a,b == vec\r\n  return vec(a.x + b.x, a.y + b.y)\r\n}\r\n  \r\nexport  function multiplyVec(a, scalar){\r\n  //multiply a * scalar\r\n  return vec(a.x * scalar, a.y * scalar)  \r\n}\r\n  \r\nexport function subVec(a,b) {\r\n  //subtract a - b ; a,b == vec\r\n  return vec(a.x - b.x, a.y - b.y)\r\n}\r\n  \r\nexport function lenVec(a) {\r\n  //get length of a ; a == vec\r\n  return Math.sqrt(a.x*a.x, a.y*a.y)\r\n}\r\n  \r\nexport function getStepSize(c) {\r\n  //get amount of unitary steps along length of vec c (vector from a, to b), c == vec\r\n  return 1.0 / Math.max(c.x,c.y)  \r\n}\r\n  \r\nexport function getSteps(c) {\r\n  return Math.max(c.x,c.y)  \r\n}\r\n  \r\nexport function triangle(a,b,c){\r\n  return{\r\n    a:a,\r\n    b:b, \r\n    c:c\r\n  }\r\n}  \r\n  \r\n\r\nexport function roundVec(c){\r\n  return vec(Math.round(c.x), Math.round(c.y))\r\n}\r\n\r\n// function* = this indicates is a generator/lazy sequence\r\nexport function* rasteriseTriangle(triangle){\r\n  const m = subVec(triangle.b,triangle.a) // b-a \r\n  const n = subVec(triangle.c,triangle.a) // c-b\r\n  const o = triangle.a//triangle.b  \r\n\r\n  const alpha = getStepSize(m) \r\n  const beta = getStepSize(n) \r\n \r\n  const steps_m = getSteps(m)\r\n  const steps_n = getSteps(n)\r\n   \r\n\r\n  for (const u of range(steps_m)) {\r\n    const steps = Math.round(steps_n*((steps_m - u)/(steps_m)))\r\n    for (const v of range(steps)) { //(getSteps(n)-u)\r\n      //yield u*alpha*m + v*beta*n + o;\r\n      yield roundVec(addVec(o, addVec(multiplyVec(m,u*alpha), multiplyVec(n,v*beta)))) \r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction getAverageValue(values){\r\n  // reduce:\r\n  // let accumulator = startValue // #2nd argument \r\n  // for (const value of values) {\r\n  //   accumulator = reducer(accumulator, value); # reducer #1st argument \r\n  // }\r\n  // return accumulator;\r\n  const total = \r\n    values.reduce(  \r\n      (x,y) => x+y,   //reducer #1st argument \r\n      0.0             //startValue #2nd argument\r\n    )\r\n  return total/values.length\r\n}\r\n\r\n\r\nfunction getAverageColorRGBA(pixels){\r\n  const r = getAverageValue(pixels.map(x => x[0]))\r\n  const g = getAverageValue(pixels.map(x => x[1]))\r\n  const b = getAverageValue(pixels.map(x => x[2]))\r\n  const a = getAverageValue(pixels.map(x => x[3]))\r\n  return [r,g,b,a].map(x => Math.round(x))\r\n}\r\n\r\n\r\nexport function drawAverageTriangles(triangles, imageMatrix){\r\n  for (const triangle of triangles){\r\n    const tr = [...rasteriseTriangle(triangle)] //vec(0,0), vec(100,0), vec(0,200) = weird\r\n    //[...tr].forEach(pos => { imageMatrix[pos.x][pos.y] = [255, 50, 50, 255] });\r\n    const pixels = tr.map(pos => imageMatrix[pos.y][pos.x])\r\n    const avgColor = getAverageColorRGBA(pixels)\r\n    for (const pos of tr) {\r\n      //console.log(pos);\r\n      //imageMatrix[pos.y][pos.x] = [250, 250, 50, 255]; \r\n      imageMatrix[pos.y][pos.x] = avgColor\r\n    }\r\n  }\r\n}","import { useEffect, useState } from 'react'\r\nimport './App.css';\r\nimport { triangle, vec, drawAverageTriangles } from './maths/geometry';\r\nimport { to_image_data, to_image_matrix, slidingWindow } from './maths/utils';\r\n\r\n\r\n\r\n\r\n\r\nfunction main(verticesOfTriangles) {\r\n  const canvas = document.querySelector(\".inputImageCanvas\");\r\n  const img = document.querySelector(\".inputImage\");\r\n\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n\r\n  const ctx = canvas.getContext('2d');  \r\n  ctx.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n  console.log('main', verticesOfTriangles);\r\n  const imageData = ctx.getImageData(0, 0, 512, 512);\r\n\r\n  const imageMatrix = to_image_matrix(512, 4, imageData);\r\n  //console.log(imageMatrix);\r\n\r\n  const w_triangles = slidingWindow(3, verticesOfTriangles)\r\n  console.log('w_triangles', w_triangles)\r\n  //triangle part\r\n  const triangles = w_triangles.map(tr => triangle(tr[0], tr[1], tr[2]));\r\n  \r\n  \r\n  //const triangles = [triangle(vec(175,175), vec(175,200), vec(200,200)), triangle(vec(75,75), vec(75,100), vec(100,100))];\r\n  \r\n  drawAverageTriangles(triangles, imageMatrix);\r\n\r\n  const imageDataAgain = to_image_data(imageMatrix);\r\n  //console.log(imageDataAgain);\r\n\r\n  const newImage = new ImageData(imageDataAgain, 512, 512);\r\n  //const newImage = new ImageData(newImageData, 512, 512);\r\n  ctx.putImageData(newImage, 0, 0);\r\n     \r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [verticesOfTriangles, setVarVerticesOfTr] = useState([]); //this initiates i=0  \r\n  console.log('verticesOfTriangles = ', verticesOfTriangles);\r\n\r\n  useEffect(()=>{\r\n    const doSth = () => main(verticesOfTriangles);\r\n    setTimeout(doSth);\r\n\r\n    //setTimeout(() => main(verticesOfTriangles)); //this is equivalent to above\r\n  }); //}, []); this is dependency array > reruns main if smth has changed  \r\n\r\n  function onClickHandler(event) {\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = Math.round(event.clientX - rect.left);\r\n    const y = Math.round(event.clientY - rect.top);\r\n    console.log({x,y});\r\n\r\n    setVarVerticesOfTr([...verticesOfTriangles, vec(x,y)])\r\n  }\r\n\r\n  \r\n  // React.createElement('div', ...)\r\n  return (\r\n    <div className=\"App\">\r\n      <h1> Hello geometry </h1>\r\n      <img className=\"inputImage\" src=\"mv_2020_10_512.png\" />\r\n      <canvas className=\"inputImageCanvas\" width={500} height={500} onClick={onClickHandler} />\r\n      <svg width={500} height={500}>\r\n        <circle fill=\"red\" r={50} cx={200} cy={200} />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}